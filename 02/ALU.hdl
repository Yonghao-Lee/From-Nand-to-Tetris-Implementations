// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // You're advised to work on the ALU chip in two steps:
    // - First, without handling status outputs (ALU-nostat)
    // - Then, adding the missing functionality for the "full" chip (ALU). 
    // You only need to submit the "full" ALU, no need to submit the partial
    // implementation (ALU-nostat).
    // Put your code here:
    // handle zx - zero x if zx = 1
    Mux16(a=x, b=false, sel=zx, out=xAfterZx);
    // now if zx = 0, the original x passes through, else all zeros
    // handle nx - negate x if nx = 1
    Not16(in=xAfterZx, out=notX);
    Mux16(a=xAfterZx, b=notX, sel=nx, out=xAfterNx);
    // handle zy - zero y if zy = 1
    Mux16(a=y, b=false, sel=zy, out=yAfterZy);
    Not16(in=yAfterZy, out=notY);
    Mux16(a=yAfterZy, b=notY, sel=ny, out=yAfterNy);

    // handle f - perform AND or ADD
    And16(a=xAfterNx, b=yAfterNy, out=andResult);
    Add16(a=xAfterNx, b=yAfterNy, out=addResult);
    Mux16(a=andResult, b=addResult, sel=f, out=fResult);

    // handle no - negate output if no = 1
    Not16(in=fResult, out=notFResult);
    Mux16(a=fResult, b=notFResult, sel=no, out=finalResult);

    // Connect to output pins
    Or16(a=finalResult, b=false, out=out);

    // split for status flags
    Or16(a=finalResult, b=false, out[0..7]=lowBits, out[8..15]=highBits, out[15]=msb);

    // set zr - true if output is 0
    Or8Way(in=lowBits, out=or1);
    Or8Way(in=highBits, out=or2);
    Or(a=or1, b=or2, out=nonZero);
    Not(in=nonZero, out=zr);

    // set ng - true if output is negative
    And(a=msb, b=true, out=ng);

}