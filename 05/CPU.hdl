// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // Instruction decoder, if bit 15 is 0 then it's a A-instruction, else C-instruction

    // For A-instruction: Load the value from instruction
    // For C-instruction: Load ALU output if destination bit d1 is set
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=muxAout);
    Not(in=instruction[15], out=isAInstruction);
    Or(a=isAInstruction, b=instruction[5], out=loadA);
    ARegister(in=muxAout, load=loadA, out=Aout, out[0..14]=addressM);

    // D-register handling
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=ALUout, load=loadD, out=Dout);

    // Calculate ALU output
    Mux16(a=Aout, b=inM, sel=instruction[12], out=AMout);
    ALU(x=Dout, y=AMout, 
        zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], 
        f=instruction[7], no=instruction[6], 
        out=ALUout, out=outM, zr=ZRout, ng=NGout);

    // Memory writing
    And(a=instruction[15], b=instruction[3], out=writeM);

    // Jump control bits - only valid for C-instructions
    And(a=instruction[15], b=instruction[0], out=j1);  // Fixed: instruction[0] is j1
    And(a=instruction[15], b=instruction[1], out=j2);  // Fixed: instruction[1] is j2
    And(a=instruction[15], b=instruction[2], out=j3);  // Fixed: instruction[2] is j3

    Not(in=ZRout, out=notZR);
    Not(in=NGout, out=notNG);
    And(a=notZR, b=notNG, out=POSout);  // Positive output (>0)
    
    // Jump conditions
    And(a=j1, b=POSout, out=JGT);    // JGT: if out > 0 jump
    And(a=j2, b=ZRout, out=JEQ);     // JEQ: if out = 0 jump
    And(a=j3, b=NGout, out=JLT);     // JLT: if out < 0 jump
    Or(a=JGT, b=JEQ, out=JGE);       // JGE: if out >= 0 jump
    Or(a=JGT, b=JLT, out=JNE);       // JNE: if out != 0 jump
    Or(a=JEQ, b=JLT, out=JLE);       // JLE: if out <= 0 jump
    
    // Unconditional jump (JMP)
    And(a=j1, b=j2, out=j1j2);
    And(a=j1j2, b=j3, out=JMP);

    // If any jump condition is true, shouldJump becomes 1
    Or8Way(in[0]=JGT, in[1]=JEQ, in[2]=JLT, in[3]=JGE, 
        in[4]=JNE, in[5]=JLE, in[6]=JMP, in[7]=false, out=shouldJump);

    // PC Logic: Priority is reset > load > inc
    PC(in=Aout, load=shouldJump, inc=true, reset=reset, out[0..14]=pc);
}