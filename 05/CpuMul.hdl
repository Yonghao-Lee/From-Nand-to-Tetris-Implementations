// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14]==1 and instruction[13]==1),
// then CpuMul behaves exactly the same as the regular CPU.
// If instruction[15]==1 and instruction[14]==0 the chip will behave as follows:
// | Instruction           | 15 | 14 | 13 | a | c1 | c2 | c3 | c4 | c5 | c6 |
// |-----------------------|:--:|:--:|:--:|:-:|:--:|:--:|:--:|:--:|:--:|:--:|
// | Regular a-instruction |  0 |  * |  * | * |  * |  * |  * |  * |  * |  * |
// | Regular c-instruction |  1 |  1 |  1 | * |  * |  * |  * |  * |  * |  * |
// | dest=A<<;jump         |  1 |  0 |  1 | 0 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=D<<;jump         |  1 |  0 |  1 | 0 |  1 |  1 |  0 |  0 |  0 |  0 |
// | dest=M<<;jump         |  1 |  0 |  1 | 1 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=A>>;jump         |  1 |  0 |  1 | 0 |  0 |  0 |  0 |  0 |  0 |  0 |
// | dest=D>>;jump         |  1 |  0 |  1 | 0 |  0 |  1 |  0 |  0 |  0 |  0 |
// | dest=M>>;jump         |  1 |  0 |  1 | 1 |  0 |  0 |  0 |  0 |  0 |  0 |
// Where:
// - "<<" is a left shift, and ">>" is a right shift, as defined in project 2.
//   These notations were chosen because they are used in real programming
//   languages.
// - dest and jump can take the same values as in the regular CPU.

CHIP CpuMul {
    IN  
        inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT 
        outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    
    PARTS:
    // Instruction decoding
    Not(in=instruction[15], out=isAInstruction);
    
    // A register logic
    And(a=instruction[5], b=instruction[15], out=loadAfromC);
    Or(a=isAInstruction, b=loadAfromC, out=loadA);
    // Select what value to load into A register
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=aRegIn);
    ARegister(in=aRegIn, load=loadA, out=aRegOut, out[0..14]=addressM);

    // D register logic
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=aluOut, load=loadD, out=dRegOut);

    // ALU logic
    // This mux selects Y input for ALU based on a-bit (instruction[12])
    Mux16(a=aRegOut, b=inM, sel=instruction[12], out=aluInputY);
    
    ExtendAlu(
        x=dRegOut,
        y=aluInputY,
        instruction[0..5]=instruction[6..11],
        instruction[6]=instruction[13],
        instruction[7]=instruction[14],
        instruction[8]=instruction[15],
        out=aluOut,
        zr=zeroOut,
        ng=negOut
    );
    
    // Set output M
    Or16(a=aluOut, b=false, out=outM);
    
    // Determine if we should write to memory (d3 bit in C-instruction)
    And(a=instruction[15], b=instruction[3], out=writeM);
    
    // Jump logic
    And(a=zeroOut, b=instruction[1], out=jeq);  // Jump if zero
    And(a=negOut, b=instruction[2], out=jlt);   // Jump if negative
    Or(a=zeroOut, b=negOut, out=zeroOrNeg);
    Not(in=zeroOrNeg, out=positive);
    And(a=positive, b=instruction[0], out=jgt); // Jump if positive
    
    // Combine jump conditions
    Or(a=jeq, b=jlt, out=jle);
    Or(a=jle, b=jgt, out=jumpToA);
    And(a=instruction[15], b=jumpToA, out=doPCJump);
    
    // Program Counter logic
    PC(in=aRegOut, load=doPCJump, inc=true, reset=reset, out[0..14]=pc);
}
