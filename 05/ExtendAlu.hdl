// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).


// The ExtendAlu chip is an extension of the standard ALU which also supports
// shift operations.
// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The "ng" and "zr" output pins behave the same as in the regular ALU.
// The "out" output is defined as follows:
// If instruction[8]=1 and instruction[7]=1 the output is identical to the 
// regular ALU, where:
// instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no
// Else, if instruction[8]=0 and instruction[7]=1, the output is a shift:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x".
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.
// - All other inputs are undefined.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
     // Put your code here:
     // Determine the mode based on instruction bits
     And(a=instruction[8], b=instruction[7], out=useRegularALU);
     Not(in=instruction[8], out=notInst8);
     And(a=notInst8, b=instruction[7], out=useShift);

     // Regular ALU operation
     ALU(x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3], 
        ny=instruction[2], f=instruction[1], no=instruction[0], 
        out=regularOut, zr=regularZr, ng=regularNg);

     // Shift operation
     // Choose which input to shift x or y
     Mux16(a=y, b=x, sel=instruction[4], out=shiftInput);
     ShiftLeft(in=shiftInput, out=leftShift);
     ShiftRight(in=shiftInput, out=rightShift);

     // Choose left or right based on instruction bit 5
     Mux16(a=rightShift, b=leftShift, sel=instruction[5], out=shiftOut);

     // Determine if shift result is zero or negative
     // Split shiftOut into lower and upper halves first
     And16(a=shiftOut, b=true, out[0..7]=shiftOutLow, out[8..15]=shiftOutHigh, out[15]=MSB);

     // Now use these separate wires with Or8Way
     Or8Way(in=shiftOutLow, out=orLow);
     Or8Way(in=shiftOutHigh, out=orHigh);
     // Result is not zero if any bit is 1
     Or(a=orLow, b=orHigh, out=notZero);
     Not(in=notZero, out=shiftZr);

     And(a=MSB, b=true, out=shiftNg);

     // Select final output based on mode
     Mux16(a=shiftOut, b=regularOut, sel=useRegularALU, out=out);
     Mux(a=shiftZr, b=regularZr, sel=useRegularALU, out=zr);
     Mux(a=shiftNg, b=regularNg, sel=useRegularALU, out=ng);
}
